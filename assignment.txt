interface assignment:
***if you have finished writing interface, 
***please append ! to show you have done!


In class service is unnecessary for creating instance:
    Color 
    Node
    Point
    Rectangle

    e.g.
    Color.prototype.copy = function() {
        return new Color(
            this.r,
            this.g,
            this.b,
            this.a
        );
    };
In class service is necessary for creating instance:
    Morph
    ShadowMorph
    PenMorph
    ColorPaletteMorph
    GrayPaletteMorph
    ColorPickerMorph
    BlinkerMorph
    CursorMorph
    SpeechBubbleMorph
    SliderButtonMorph
    SliderMorph
    MenuMorph
    StringMorph
    TextMorph
    TriggerMorph
    MenuItemMorph
    FrameMorph
    ScrollFrameMorph
    StringFieldMorph
    HandMorph
    WorldMorph   

    e.g.
    colorService.create(205, 205, 205);
    rectangleService.create(0, 
                            0, 
                            aCanvas.width,
                            aCanvas.height);
    worldMorphService.create(this.canvasRef.nativeElement)
    pointService.create(0, 0);

class Car{
    constructor(private engine?:Engine,
                private wheel?:Wheel,
                private carService?:CarService){
                    this
    }
    copy(){
        return this.carService.copy();
        Object.assign()
    }
}
let engine = new Engine();
let car = new Car(new Engine(), new Wheel(2,1),..);
let newCar = CarService.create("shark", )
newCar.engine.setColor(1,1,1,1);

class CarService{
    constructor(private engineService:EngineService,
                private wheelService:WheelService,
                private carService:CarService){

    }
    create(engineBrand:string, wheelBrand:string):Car{
        let engine = this.engineService.create("mous");
        let wheel = this.wheelService.create();
        return new Car(engine, wheel, this.carService);
    }
}

carService

class Engine{
    constructor(private enginePart:EnginePart){
    }
    speed()
}

class SharkEngine extends Engine{

}
class EngineService{
    constructor(private enginePartService:EnginePartService){

    }
    create(){
        let enginePart = this.enginePartService.create();
        return new Engine(enginePart);
    }
}

class EnginePart{
    constructor(){
    }
}

class EnginePartService{
    constructor(){
        
    }

    create(): EnginePart{
        return new EnginePart();
  }

}

class Wheel{
    public size:number;
    constructor(){
    }
    setSize(size:number){
        this.size = size;
    }
}

class WheelService{
    constructor(){
        
    }

    create(): Wheel{
        return new Wheel();
  }

}



class ChineseCar extends Car{
    constructor(private brand:string){
        super();
    }
}
    
siyu 30
    !PenMorph:
       constructor
       drawNew
       changed
    PenMorphService:
        create
    !Node:
        constructor
        root
    NodeService
        create
    !Rectangle:
        constructor
        extent
        center
        translateBy
        intersect
        position
        width
        mergeWith
        copy
        left
        right
        top
        bottom  
    RectangleService:
        create
    !shared.function
        newCanvas
        radians
        detect
    !FrameMorph
        constructor
        fullBounds
    FrameMorphService
        create
    !Color
        constructor
        toString
    ColorService
        create
    !Morph:
        constructor
        extent
        center
        setExtent
        silentSetExtent
        !width
        getWorld
        !position
        setPosition
        moveBy
        fullChanged
        silentMoveBy
        stepFrame
        step
        drawOn
    MorphService:
        create

    
edward 36
    Point
        constructor
        subtract!
        floorDivideBy!
        add!
        moveAtAngleIndistance(distanceAngle)!
        eq!
        round!
        min!
        max!
        gt!
        neg!
    PointService
        create!
    WorldMorph
        constructor!
        doOneCycle!
        stepFrame!
        updateBroken!
        condenseDamages!
        condense!
        fullDrawOn!
        createPenMorph!
    WorldMorphService
        create!


























necessary methods:

PenMorph:
    constructor
    drawNew
    changed
PenMorphService:
    create
Morph:
    constructor
    extent
    center
    setExtent
    silentSetExtent
    width
    world
    position
    setPosition
    moveBy
    fullChanged
    silentMoveBy
    stepFrame
    step
    drawOn
MorphService:
    create
Node:
    constructor
    root
NodeService
    create
Rectangle:
    constructor
    extent
    center
    translateBy
    intersect
    position
    width
    mergeWith
    copy
    left
    right
    top
    bottom
RectangleService:
    create
Point
    constructor
    subtract
    floorDivideBy
    add
    moveAtAngleIndistance(distanceAngle)
    eq
    round
    min
    max
    gt
    neg
PointService
    create
Color
    constructor
    toString
ColorService
    create
shared.function
    newCanvas
    radians
    detect
WorldMorph
    constructor
    doOneCycle
    stepFrame
    updateBroken
    condenseDamages
    condense
    fullDrawOn
WorldMorphService
    create
FrameMorph
    constructor
    fullBounds
FrameMorphService
    create
